// Code generated by dbx-generator. DO NOT EDIT.
package {{ .Package }}

import (
    "fmt"
    "strings"
    "encoding/json"{{range .Imports}}
        "{{.}}"
    {{end}}
)

{{range $name, $table :=  .Tables}}

var {{ .StructName }}Table = {{ .StructName }}TableSchema {}

type {{ .StructName }}TableSchema struct {

}

func (_ {{ .StructName }}TableSchema) Columns(alias string) []string{
    if alias!=""{
        alias = "`"+alias+"`"+"."
    }
	return []string{ {{range .Columns}} alias+"`{{ .ColumnName }}`", {{end}} }
}

func (s {{ .StructName }}TableSchema) SelectSQL(alias string) string{
    if alias!=""{
        return fmt.Sprintf(" select %v from {{.TableName}} as "+alias, strings.Join(s.Columns(alias), ","))
    }
	return fmt.Sprintf(" select %v from {{.TableName}} ", strings.Join(s.Columns(alias),","))
}

func (_ {{ .StructName }}TableSchema) CountSQL() string{
	return " select count(1) from {{.TableName}} "
}

type {{ .RecordName  }} struct {
    {{range .Columns}}{{ .Name }} {{ .Type }} {{ .Tag }}
    {{end}}
}

func (_ *{{ .RecordName  }}) TableName() string {
    return "{{ .TableName }}"
}

func (r *{{ .RecordName  }}) JSON() string{
    s,_:=json.Marshal(r)
    return string(s)
}

func (r *{{ .RecordName  }}) PettyJSON() string{
    s,_:=json.MarshalIndent(r,"","\t")
    return string(s)
}
{{end}}

