// Code generated by dbx-generator. DO NOT EDIT.
package module

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"
)

var AvatarTable = AvatarTableSchema{}

type AvatarTableSchema struct {
}

func (_ AvatarTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`id`", alias + "`avatar`", alias + "`created_at`", alias + "`updated_at`", alias + "`deleted_at`"}
}

func (s AvatarTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from avatar as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from avatar ", strings.Join(s.Columns(alias), ","))
}

func (_ AvatarTableSchema) CountSQL() string {
	return " select count(1) from avatar "
}

type AvatarRecord struct {
	ID        []byte     `dbx:"column:id,primary_key" json:"id" `
	Avatar    []byte     `dbx:"column:avatar" json:"avatar" `
	CreatedAt time.Time  `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt time.Time  `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
	DeletedAt *time.Time `dbx:"column:deleted_at" json:"deleted_at,omitempty" `
}

func (_ *AvatarRecord) TableName() string {
	return "avatar"
}

func (r *AvatarRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *AvatarRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var ExampleTable = ExampleTableSchema{}

type ExampleTableSchema struct {
}

func (_ ExampleTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`id`", alias + "`tinyint`", alias + "`smallint`", alias + "`mediumint`", alias + "`integer`", alias + "`int`", alias + "`bigint`", alias + "`decimal`", alias + "`numeric`", alias + "`float`", alias + "`double`", alias + "`bit`", alias + "`datetime`", alias + "`timestamp`", alias + "`char`", alias + "`varchar`", alias + "`enum`", alias + "`bool`", alias + "`nullable_tinyint`", alias + "`nullable_smallint`", alias + "`nullable_mediumint`", alias + "`nullable_integer`", alias + "`nullable_int`", alias + "`nullable_bigint`", alias + "`nullable_decimal`", alias + "`nullable_numeric`", alias + "`nullable_float`", alias + "`nullable_double`", alias + "`nullable_bit`", alias + "`nullable_date`", alias + "`nullable_datetime`", alias + "`nullable_timestamp`", alias + "`nullable_char`", alias + "`nullable_varchar`", alias + "`nullable_binary`", alias + "`nullable_varbinary`", alias + "`nullable_blob`", alias + "`nullable_mediumblob`", alias + "`nullable_longtext`", alias + "`nullable_mediumtext`", alias + "`nullable_text`", alias + "`nullable_enum`", alias + "`nullable_bool`"}
}

func (s ExampleTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from example as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from example ", strings.Join(s.Columns(alias), ","))
}

func (_ ExampleTableSchema) CountSQL() string {
	return " select count(1) from example "
}

type ExampleRecord struct {
	ID                 int64      `dbx:"column:id,primary_key,auto_increment" json:"id" `
	Tinyint            int8       `dbx:"column:tinyint" json:"tinyint" `
	Smallint           int16      `dbx:"column:smallint" json:"smallint" `
	Mediumint          int32      `dbx:"column:mediumint" json:"mediumint" `
	Integer            int32      `dbx:"column:integer" json:"integer" `
	Int                int32      `dbx:"column:int" json:"int" `
	Bigint             int64      `dbx:"column:bigint" json:"bigint" `
	Decimal            float64    `dbx:"column:decimal" json:"decimal" `
	Numeric            float64    `dbx:"column:numeric" json:"numeric" `
	Float              float32    `dbx:"column:float" json:"float" `
	Double             float64    `dbx:"column:double" json:"double" `
	Bit                []byte     `dbx:"column:bit" json:"bit" `
	Datetime           time.Time  `dbx:"column:datetime" json:"datetime" `
	Timestamp          time.Time  `dbx:"column:timestamp" json:"timestamp" `
	Char               string     `dbx:"column:char" json:"char" `
	Varchar            string     `dbx:"column:varchar" json:"varchar" `
	Enum               string     `dbx:"column:enum" json:"enum" `
	Bool               bool       `dbx:"column:bool" json:"bool" `
	NullableTinyint    *int8      `dbx:"column:nullable_tinyint" json:"nullable_tinyint,omitempty" `
	NullableSmallint   *int16     `dbx:"column:nullable_smallint" json:"nullable_smallint,omitempty" `
	NullableMediumint  *int32     `dbx:"column:nullable_mediumint" json:"nullable_mediumint,omitempty" `
	NullableInteger    *int32     `dbx:"column:nullable_integer" json:"nullable_integer,omitempty" `
	NullableInt        *int32     `dbx:"column:nullable_int" json:"nullable_int,omitempty" `
	NullableBigint     *int64     `dbx:"column:nullable_bigint" json:"nullable_bigint,omitempty" `
	NullableDecimal    *float64   `dbx:"column:nullable_decimal" json:"nullable_decimal,omitempty" `
	NullableNumeric    *float64   `dbx:"column:nullable_numeric" json:"nullable_numeric,omitempty" `
	NullableFloat      *float32   `dbx:"column:nullable_float" json:"nullable_float,omitempty" `
	NullableDouble     *float64   `dbx:"column:nullable_double" json:"nullable_double,omitempty" `
	NullableBit        []byte     `dbx:"column:nullable_bit" json:"nullable_bit,omitempty" `
	NullableDate       *time.Time `dbx:"column:nullable_date" json:"nullable_date,omitempty" `
	NullableDatetime   *time.Time `dbx:"column:nullable_datetime" json:"nullable_datetime,omitempty" `
	NullableTimestamp  *time.Time `dbx:"column:nullable_timestamp" json:"nullable_timestamp,omitempty" `
	NullableChar       *string    `dbx:"column:nullable_char" json:"nullable_char,omitempty" `
	NullableVarchar    *string    `dbx:"column:nullable_varchar" json:"nullable_varchar,omitempty" `
	NullableBinary     []byte     `dbx:"column:nullable_binary" json:"nullable_binary,omitempty" `
	NullableVarbinary  []byte     `dbx:"column:nullable_varbinary" json:"nullable_varbinary,omitempty" `
	NullableBlob       []byte     `dbx:"column:nullable_blob" json:"nullable_blob,omitempty" `
	NullableMediumblob []byte     `dbx:"column:nullable_mediumblob" json:"nullable_mediumblob,omitempty" `
	NullableLongtext   *string    `dbx:"column:nullable_longtext" json:"nullable_longtext,omitempty" `
	NullableMediumtext *string    `dbx:"column:nullable_mediumtext" json:"nullable_mediumtext,omitempty" `
	NullableText       *string    `dbx:"column:nullable_text" json:"nullable_text,omitempty" `
	NullableEnum       *string    `dbx:"column:nullable_enum" json:"nullable_enum,omitempty" `
	NullableBool       *bool      `dbx:"column:nullable_bool" json:"nullable_bool,omitempty" `
}

func (_ *ExampleRecord) TableName() string {
	return "example"
}

func (r *ExampleRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *ExampleRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var HkstpOrganizationTable = HkstpOrganizationTableSchema{}

type HkstpOrganizationTableSchema struct {
}

func (_ HkstpOrganizationTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`id`", alias + "`organization_id`", alias + "`crm_id`", alias + "`crm_organization_id`", alias + "`crm_organization_code`"}
}

func (s HkstpOrganizationTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from hkstp_organization as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from hkstp_organization ", strings.Join(s.Columns(alias), ","))
}

func (_ HkstpOrganizationTableSchema) CountSQL() string {
	return " select count(1) from hkstp_organization "
}

type HkstpOrganizationRecord struct {
	ID                  int64  `dbx:"column:id,primary_key,auto_increment" json:"id" `
	OrganizationId      []byte `dbx:"column:organization_id" json:"organization_id" `
	CrmId               string `dbx:"column:crm_id" json:"crm_id" `
	CrmOrganizationId   string `dbx:"column:crm_organization_id" json:"crm_organization_id" `
	CrmOrganizationCode string `dbx:"column:crm_organization_code" json:"crm_organization_code" `
}

func (_ *HkstpOrganizationRecord) TableName() string {
	return "hkstp_organization"
}

func (r *HkstpOrganizationRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *HkstpOrganizationRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var MenuTable = MenuTableSchema{}

type MenuTableSchema struct {
}

func (_ MenuTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`id`", alias + "`code`", alias + "`parent_id`", alias + "`sort_key`", alias + "`description`", alias + "`pos`", alias + "`deleted`", alias + "`created_at`", alias + "`updated_at`"}
}

func (s MenuTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from menu as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from menu ", strings.Join(s.Columns(alias), ","))
}

func (_ MenuTableSchema) CountSQL() string {
	return " select count(1) from menu "
}

type MenuRecord struct {
	ID          int32     `dbx:"column:id,primary_key,auto_increment" json:"id" `
	Code        string    `dbx:"column:code" json:"code" `
	ParentId    *int32    `dbx:"column:parent_id" json:"parent_id,omitempty" `
	SortKey     string    `dbx:"column:sort_key" json:"sort_key" `
	Description string    `dbx:"column:description" json:"description" `
	Pos         *string   `dbx:"column:pos" json:"pos,omitempty" `
	Deleted     bool      `dbx:"column:deleted" json:"deleted" `
	CreatedAt   time.Time `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt   time.Time `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
}

func (_ *MenuRecord) TableName() string {
	return "menu"
}

func (r *MenuRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *MenuRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var OrgTable = OrgTableSchema{}

type OrgTableSchema struct {
}

func (_ OrgTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`id`", alias + "`name`", alias + "`payer`", alias + "`fednode`", alias + "`status`", alias + "`full_name`", alias + "`slug`", alias + "`avatar_id`", alias + "`agreement_status`", alias + "`allow_create_dataset`", alias + "`contact_person_name`", alias + "`contact_person_position`", alias + "`email`", alias + "`mobile`", alias + "`country`", alias + "`city`", alias + "`description`", alias + "`creator_id`", alias + "`reason`", alias + "`created_at`", alias + "`updated_at`", alias + "`audited_at`", alias + "`deleted_at`", alias + "`region`", alias + "`logo_oss_key`", alias + "`banner_oss_key`"}
}

func (s OrgTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from org as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from org ", strings.Join(s.Columns(alias), ","))
}

func (_ OrgTableSchema) CountSQL() string {
	return " select count(1) from org "
}

type OrgRecord struct {
	ID                    []byte     `dbx:"column:id,primary_key" json:"id" `
	Name                  string     `dbx:"column:name" json:"name" `
	Payer                 string     `dbx:"column:payer" json:"payer" `
	Fednode               string     `dbx:"column:fednode" json:"fednode" `
	Status                int32      `dbx:"column:status" json:"status" `
	FullName              string     `dbx:"column:full_name" json:"full_name" `
	Slug                  string     `dbx:"column:slug" json:"slug" `
	AvatarId              []byte     `dbx:"column:avatar_id" json:"avatar_id,omitempty" `
	AgreementStatus       int32      `dbx:"column:agreement_status" json:"agreement_status" `
	AllowCreateDataset    bool       `dbx:"column:allow_create_dataset" json:"allow_create_dataset" `
	ContactPersonName     *string    `dbx:"column:contact_person_name" json:"contact_person_name,omitempty" `
	ContactPersonPosition *string    `dbx:"column:contact_person_position" json:"contact_person_position,omitempty" `
	Email                 *string    `dbx:"column:email" json:"email,omitempty" `
	Mobile                *string    `dbx:"column:mobile" json:"mobile,omitempty" `
	Country               *string    `dbx:"column:country" json:"country,omitempty" `
	City                  *string    `dbx:"column:city" json:"city,omitempty" `
	Description           *string    `dbx:"column:description" json:"description,omitempty" `
	CreatorId             []byte     `dbx:"column:creator_id" json:"creator_id,omitempty" `
	Reason                []byte     `dbx:"column:reason" json:"reason,omitempty" `
	CreatedAt             time.Time  `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt             time.Time  `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
	AuditedAt             *time.Time `dbx:"column:audited_at" json:"audited_at,omitempty" `
	DeletedAt             *time.Time `dbx:"column:deleted_at" json:"deleted_at,omitempty" `
	Region                string     `dbx:"column:region" json:"region" `
	LogoOssKey            string     `dbx:"column:logo_oss_key" json:"logo_oss_key" `
	BannerOssKey          string     `dbx:"column:banner_oss_key" json:"banner_oss_key" `
}

func (_ *OrgRecord) TableName() string {
	return "org"
}

func (r *OrgRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *OrgRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var OrgLangTable = OrgLangTableSchema{}

type OrgLangTableSchema struct {
}

func (_ OrgLangTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`id`", alias + "`org_id`", alias + "`language_code`", alias + "`name`", alias + "`desc`", alias + "`address`", alias + "`created_at`", alias + "`updated_at`"}
}

func (s OrgLangTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from org_lang as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from org_lang ", strings.Join(s.Columns(alias), ","))
}

func (_ OrgLangTableSchema) CountSQL() string {
	return " select count(1) from org_lang "
}

type OrgLangRecord struct {
	ID           int64     `dbx:"column:id,primary_key,auto_increment" json:"id" `
	OrgId        []byte    `dbx:"column:org_id" json:"org_id" `
	LanguageCode *string   `dbx:"column:language_code" json:"language_code,omitempty" `
	Name         string    `dbx:"column:name" json:"name" `
	Desc         *string   `dbx:"column:desc" json:"desc,omitempty" `
	Address      string    `dbx:"column:address" json:"address" `
	CreatedAt    time.Time `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt    time.Time `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
}

func (_ *OrgLangRecord) TableName() string {
	return "org_lang"
}

func (r *OrgLangRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *OrgLangRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var OrgProductListTable = OrgProductListTableSchema{}

type OrgProductListTableSchema struct {
}

func (_ OrgProductListTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`id`", alias + "`org_id`", alias + "`logo`", alias + "`tags`", alias + "`created_at`", alias + "`updated_at`", alias + "`logo_oss_key`"}
}

func (s OrgProductListTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from org_product_list as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from org_product_list ", strings.Join(s.Columns(alias), ","))
}

func (_ OrgProductListTableSchema) CountSQL() string {
	return " select count(1) from org_product_list "
}

type OrgProductListRecord struct {
	ID         []byte    `dbx:"column:id,primary_key" json:"id" `
	OrgId      []byte    `dbx:"column:org_id" json:"org_id" `
	Logo       []byte    `dbx:"column:logo" json:"logo,omitempty" `
	Tags       string    `dbx:"column:tags" json:"tags" `
	CreatedAt  time.Time `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt  time.Time `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
	LogoOssKey string    `dbx:"column:logo_oss_key" json:"logo_oss_key" `
}

func (_ *OrgProductListRecord) TableName() string {
	return "org_product_list"
}

func (r *OrgProductListRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *OrgProductListRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var OrgProductListLangTable = OrgProductListLangTableSchema{}

type OrgProductListLangTableSchema struct {
}

func (_ OrgProductListLangTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`id`", alias + "`org_product_list_id`", alias + "`language_code`", alias + "`name`", alias + "`desc`", alias + "`created_at`", alias + "`updated_at`"}
}

func (s OrgProductListLangTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from org_product_list_lang as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from org_product_list_lang ", strings.Join(s.Columns(alias), ","))
}

func (_ OrgProductListLangTableSchema) CountSQL() string {
	return " select count(1) from org_product_list_lang "
}

type OrgProductListLangRecord struct {
	ID               int64     `dbx:"column:id,primary_key,auto_increment" json:"id" `
	OrgProductListId []byte    `dbx:"column:org_product_list_id" json:"org_product_list_id" `
	LanguageCode     string    `dbx:"column:language_code" json:"language_code" `
	Name             string    `dbx:"column:name" json:"name" `
	Desc             string    `dbx:"column:desc" json:"desc" `
	CreatedAt        time.Time `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt        time.Time `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
}

func (_ *OrgProductListLangRecord) TableName() string {
	return "org_product_list_lang"
}

func (r *OrgProductListLangRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *OrgProductListLangRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var OrgTagTable = OrgTagTableSchema{}

type OrgTagTableSchema struct {
}

func (_ OrgTagTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`id`", alias + "`org_id`", alias + "`creator_id`", alias + "`tag`", alias + "`created_at`", alias + "`updated_at`"}
}

func (s OrgTagTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from org_tag as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from org_tag ", strings.Join(s.Columns(alias), ","))
}

func (_ OrgTagTableSchema) CountSQL() string {
	return " select count(1) from org_tag "
}

type OrgTagRecord struct {
	ID        int64     `dbx:"column:id,primary_key,auto_increment" json:"id" `
	OrgId     []byte    `dbx:"column:org_id" json:"org_id" `
	CreatorId []byte    `dbx:"column:creator_id" json:"creator_id" `
	Tag       *string   `dbx:"column:tag" json:"tag,omitempty" `
	CreatedAt time.Time `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt time.Time `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
}

func (_ *OrgTagRecord) TableName() string {
	return "org_tag"
}

func (r *OrgTagRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *OrgTagRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var OrgUserTable = OrgUserTableSchema{}

type OrgUserTableSchema struct {
}

func (_ OrgUserTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`org_id`", alias + "`user_id`", alias + "`role`", alias + "`created_at`", alias + "`updated_at`"}
}

func (s OrgUserTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from org_user as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from org_user ", strings.Join(s.Columns(alias), ","))
}

func (_ OrgUserTableSchema) CountSQL() string {
	return " select count(1) from org_user "
}

type OrgUserRecord struct {
	OrgId     []byte    `dbx:"column:org_id,primary_key" json:"org_id" `
	UserId    []byte    `dbx:"column:user_id,primary_key" json:"user_id" `
	Role      int32     `dbx:"column:role" json:"role" `
	CreatedAt time.Time `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt time.Time `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
}

func (_ *OrgUserRecord) TableName() string {
	return "org_user"
}

func (r *OrgUserRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *OrgUserRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var OrgUserApplicationTable = OrgUserApplicationTableSchema{}

type OrgUserApplicationTableSchema struct {
}

func (_ OrgUserApplicationTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`id`", alias + "`org_id`", alias + "`user_id`", alias + "`role`", alias + "`applicant_id`", alias + "`approver_id`", alias + "`status`", alias + "`notes`", alias + "`created_at`", alias + "`updated_at`", alias + "`deleted_at`"}
}

func (s OrgUserApplicationTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from org_user_application as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from org_user_application ", strings.Join(s.Columns(alias), ","))
}

func (_ OrgUserApplicationTableSchema) CountSQL() string {
	return " select count(1) from org_user_application "
}

type OrgUserApplicationRecord struct {
	ID          []byte     `dbx:"column:id,primary_key" json:"id" `
	OrgId       []byte     `dbx:"column:org_id" json:"org_id" `
	UserId      []byte     `dbx:"column:user_id" json:"user_id" `
	Role        int32      `dbx:"column:role" json:"role" `
	ApplicantId []byte     `dbx:"column:applicant_id" json:"applicant_id" `
	ApproverId  []byte     `dbx:"column:approver_id" json:"approver_id,omitempty" `
	Status      *int32     `dbx:"column:status" json:"status,omitempty" `
	Notes       *string    `dbx:"column:notes" json:"notes,omitempty" `
	CreatedAt   time.Time  `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt   time.Time  `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
	DeletedAt   *time.Time `dbx:"column:deleted_at" json:"deleted_at,omitempty" `
}

func (_ *OrgUserApplicationRecord) TableName() string {
	return "org_user_application"
}

func (r *OrgUserApplicationRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *OrgUserApplicationRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var OrgUserInviteTable = OrgUserInviteTableSchema{}

type OrgUserInviteTableSchema struct {
}

func (_ OrgUserInviteTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`id`", alias + "`org_id`", alias + "`user_id`", alias + "`role`", alias + "`status`", alias + "`email`", alias + "`event_id`", alias + "`creator_id`", alias + "`created_at`", alias + "`updated_at`"}
}

func (s OrgUserInviteTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from org_user_invite as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from org_user_invite ", strings.Join(s.Columns(alias), ","))
}

func (_ OrgUserInviteTableSchema) CountSQL() string {
	return " select count(1) from org_user_invite "
}

type OrgUserInviteRecord struct {
	ID        int64     `dbx:"column:id,primary_key,auto_increment" json:"id" `
	OrgId     []byte    `dbx:"column:org_id" json:"org_id" `
	UserId    []byte    `dbx:"column:user_id" json:"user_id,omitempty" `
	Role      int32     `dbx:"column:role" json:"role" `
	Status    int32     `dbx:"column:status" json:"status" `
	Email     string    `dbx:"column:email" json:"email" `
	EventId   []byte    `dbx:"column:event_id" json:"event_id,omitempty" `
	CreatorId []byte    `dbx:"column:creator_id" json:"creator_id" `
	CreatedAt time.Time `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt time.Time `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
}

func (_ *OrgUserInviteRecord) TableName() string {
	return "org_user_invite"
}

func (r *OrgUserInviteRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *OrgUserInviteRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var PermissionTable = PermissionTableSchema{}

type PermissionTableSchema struct {
}

func (_ PermissionTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`code`", alias + "`resource`", alias + "`action`", alias + "`description`", alias + "`deleted`", alias + "`created_at`", alias + "`updated_at`"}
}

func (s PermissionTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from permission as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from permission ", strings.Join(s.Columns(alias), ","))
}

func (_ PermissionTableSchema) CountSQL() string {
	return " select count(1) from permission "
}

type PermissionRecord struct {
	Code        string    `dbx:"column:code,primary_key" json:"code" `
	Resource    string    `dbx:"column:resource" json:"resource" `
	Action      string    `dbx:"column:action" json:"action" `
	Description string    `dbx:"column:description" json:"description" `
	Deleted     bool      `dbx:"column:deleted" json:"deleted" `
	CreatedAt   time.Time `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt   time.Time `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
}

func (_ *PermissionRecord) TableName() string {
	return "permission"
}

func (r *PermissionRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *PermissionRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var ResetPasswordTable = ResetPasswordTableSchema{}

type ResetPasswordTableSchema struct {
}

func (_ ResetPasswordTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`token_hash`", alias + "`user_id`", alias + "`expired_at`", alias + "`created_at`", alias + "`updated_at`", alias + "`deleted_at`"}
}

func (s ResetPasswordTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from reset_password as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from reset_password ", strings.Join(s.Columns(alias), ","))
}

func (_ ResetPasswordTableSchema) CountSQL() string {
	return " select count(1) from reset_password "
}

type ResetPasswordRecord struct {
	TokenHash string     `dbx:"column:token_hash,primary_key" json:"token_hash" `
	UserId    []byte     `dbx:"column:user_id" json:"user_id" `
	ExpiredAt time.Time  `dbx:"column:expired_at" json:"expired_at" `
	CreatedAt time.Time  `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt time.Time  `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
	DeletedAt *time.Time `dbx:"column:deleted_at" json:"deleted_at,omitempty" `
}

func (_ *ResetPasswordRecord) TableName() string {
	return "reset_password"
}

func (r *ResetPasswordRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *ResetPasswordRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var SchemaMigrationsTable = SchemaMigrationsTableSchema{}

type SchemaMigrationsTableSchema struct {
}

func (_ SchemaMigrationsTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`version`", alias + "`dirty`"}
}

func (s SchemaMigrationsTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from schema_migrations as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from schema_migrations ", strings.Join(s.Columns(alias), ","))
}

func (_ SchemaMigrationsTableSchema) CountSQL() string {
	return " select count(1) from schema_migrations "
}

type SchemaMigrationsRecord struct {
	Version int64 `dbx:"column:version,primary_key" json:"version" `
	Dirty   bool  `dbx:"column:dirty" json:"dirty" `
}

func (_ *SchemaMigrationsRecord) TableName() string {
	return "schema_migrations"
}

func (r *SchemaMigrationsRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *SchemaMigrationsRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var UserTable = UserTableSchema{}

type UserTableSchema struct {
}

func (_ UserTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`id`", alias + "`name`", alias + "`fednode`", alias + "`agreement_status`", alias + "`identity`", alias + "`hashed_password`", alias + "`password_updated_at`", alias + "`password_errors_num`", alias + "`last_login_at`", alias + "`status`", alias + "`first_name`", alias + "`last_name`", alias + "`email`", alias + "`mobile`", alias + "`company`", alias + "`position`", alias + "`city`", alias + "`country`", alias + "`region`", alias + "`affiliation`", alias + "`description`", alias + "`verification`", alias + "`reason`", alias + "`is_reset_password`", alias + "`created_at`", alias + "`updated_at`", alias + "`deleted_at`", alias + "`expired_at`", alias + "`identification_type`", alias + "`identification_number`", alias + "`identification_expiry_date`", alias + "`lang`", alias + "`timezone`", alias + "`system_role`", alias + "`avatar_id`", alias + "`avatar_oss_key`", alias + "`inviter_id`", alias + "`tutorial`", alias + "`terms_and_conditions`"}
}

func (s UserTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from user as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from user ", strings.Join(s.Columns(alias), ","))
}

func (_ UserTableSchema) CountSQL() string {
	return " select count(1) from user "
}

type UserRecord struct {
	ID                       []byte     `dbx:"column:id,primary_key" json:"id" `
	Name                     string     `dbx:"column:name" json:"name" `
	Fednode                  string     `dbx:"column:fednode" json:"fednode" `
	AgreementStatus          int32      `dbx:"column:agreement_status" json:"agreement_status" `
	Identity                 int32      `dbx:"column:identity" json:"identity" `
	HashedPassword           string     `dbx:"column:hashed_password" json:"hashed_password" `
	PasswordUpdatedAt        time.Time  `dbx:"column:password_updated_at" json:"password_updated_at" `
	PasswordErrorsNum        int32      `dbx:"column:password_errors_num" json:"password_errors_num" `
	LastLoginAt              *time.Time `dbx:"column:last_login_at" json:"last_login_at,omitempty" `
	Status                   int32      `dbx:"column:status" json:"status" `
	FirstName                *string    `dbx:"column:first_name" json:"first_name,omitempty" `
	LastName                 *string    `dbx:"column:last_name" json:"last_name,omitempty" `
	Email                    string     `dbx:"column:email" json:"email" `
	Mobile                   *string    `dbx:"column:mobile" json:"mobile,omitempty" `
	Company                  *string    `dbx:"column:company" json:"company,omitempty" `
	Position                 *string    `dbx:"column:position" json:"position,omitempty" `
	City                     *string    `dbx:"column:city" json:"city,omitempty" `
	Country                  *string    `dbx:"column:country" json:"country,omitempty" `
	Region                   *string    `dbx:"column:region" json:"region,omitempty" `
	Affiliation              *string    `dbx:"column:affiliation" json:"affiliation,omitempty" `
	Description              *string    `dbx:"column:description" json:"description,omitempty" `
	Verification             int32      `dbx:"column:verification" json:"verification" `
	Reason                   *string    `dbx:"column:reason" json:"reason,omitempty" `
	IsResetPassword          *bool      `dbx:"column:is_reset_password" json:"is_reset_password,omitempty" `
	CreatedAt                time.Time  `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt                time.Time  `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
	DeletedAt                *time.Time `dbx:"column:deleted_at" json:"deleted_at,omitempty" `
	ExpiredAt                *time.Time `dbx:"column:expired_at" json:"expired_at,omitempty" `
	IdentificationType       *string    `dbx:"column:identification_type" json:"identification_type,omitempty" `
	IdentificationNumber     *string    `dbx:"column:identification_number" json:"identification_number,omitempty" `
	IdentificationExpiryDate *time.Time `dbx:"column:identification_expiry_date" json:"identification_expiry_date,omitempty" `
	Lang                     string     `dbx:"column:lang" json:"lang" `
	Timezone                 string     `dbx:"column:timezone" json:"timezone" `
	SystemRole               string     `dbx:"column:system_role" json:"system_role" `
	AvatarId                 []byte     `dbx:"column:avatar_id" json:"avatar_id,omitempty" `
	AvatarOssKey             string     `dbx:"column:avatar_oss_key" json:"avatar_oss_key" `
	InviterId                []byte     `dbx:"column:inviter_id" json:"inviter_id,omitempty" `
	Tutorial                 bool       `dbx:"column:tutorial" json:"tutorial" `
	TermsAndConditions       bool       `dbx:"column:terms_and_conditions" json:"terms_and_conditions" `
}

func (_ *UserRecord) TableName() string {
	return "user"
}

func (r *UserRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *UserRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var UserGroupTable = UserGroupTableSchema{}

type UserGroupTableSchema struct {
}

func (_ UserGroupTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`id`", alias + "`role`", alias + "`identity`", alias + "`description`", alias + "`created_at`", alias + "`updated_at`"}
}

func (s UserGroupTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from user_group as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from user_group ", strings.Join(s.Columns(alias), ","))
}

func (_ UserGroupTableSchema) CountSQL() string {
	return " select count(1) from user_group "
}

type UserGroupRecord struct {
	ID          int32     `dbx:"column:id,primary_key,auto_increment" json:"id" `
	Role        int32     `dbx:"column:role" json:"role" `
	Identity    int32     `dbx:"column:identity" json:"identity" `
	Description string    `dbx:"column:description" json:"description" `
	CreatedAt   time.Time `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt   time.Time `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
}

func (_ *UserGroupRecord) TableName() string {
	return "user_group"
}

func (r *UserGroupRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *UserGroupRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var UserGroupMenuTable = UserGroupMenuTableSchema{}

type UserGroupMenuTableSchema struct {
}

func (_ UserGroupMenuTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`user_group_id`", alias + "`menu_code`", alias + "`created_at`", alias + "`updated_at`"}
}

func (s UserGroupMenuTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from user_group_menu as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from user_group_menu ", strings.Join(s.Columns(alias), ","))
}

func (_ UserGroupMenuTableSchema) CountSQL() string {
	return " select count(1) from user_group_menu "
}

type UserGroupMenuRecord struct {
	UserGroupId int32     `dbx:"column:user_group_id,primary_key" json:"user_group_id" `
	MenuCode    string    `dbx:"column:menu_code,primary_key" json:"menu_code" `
	CreatedAt   time.Time `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt   time.Time `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
}

func (_ *UserGroupMenuRecord) TableName() string {
	return "user_group_menu"
}

func (r *UserGroupMenuRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *UserGroupMenuRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var UserGroupPermissionTable = UserGroupPermissionTableSchema{}

type UserGroupPermissionTableSchema struct {
}

func (_ UserGroupPermissionTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`user_group_id`", alias + "`permission_code`", alias + "`created_at`", alias + "`updated_at`"}
}

func (s UserGroupPermissionTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from user_group_permission as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from user_group_permission ", strings.Join(s.Columns(alias), ","))
}

func (_ UserGroupPermissionTableSchema) CountSQL() string {
	return " select count(1) from user_group_permission "
}

type UserGroupPermissionRecord struct {
	UserGroupId    int32     `dbx:"column:user_group_id,primary_key" json:"user_group_id" `
	PermissionCode string    `dbx:"column:permission_code,primary_key" json:"permission_code" `
	CreatedAt      time.Time `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt      time.Time `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
}

func (_ *UserGroupPermissionRecord) TableName() string {
	return "user_group_permission"
}

func (r *UserGroupPermissionRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *UserGroupPermissionRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var UserOidcTable = UserOidcTableSchema{}

type UserOidcTableSchema struct {
}

func (_ UserOidcTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`id`", alias + "`user_id`", alias + "`issuer`", alias + "`oid`", alias + "`sub`", alias + "`aud`", alias + "`created_at`", alias + "`updated_at`"}
}

func (s UserOidcTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from user_oidc as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from user_oidc ", strings.Join(s.Columns(alias), ","))
}

func (_ UserOidcTableSchema) CountSQL() string {
	return " select count(1) from user_oidc "
}

type UserOidcRecord struct {
	ID        int64     `dbx:"column:id,primary_key,auto_increment" json:"id" `
	UserId    []byte    `dbx:"column:user_id" json:"user_id" `
	Issuer    string    `dbx:"column:issuer" json:"issuer" `
	Oid       string    `dbx:"column:oid" json:"oid" `
	Sub       string    `dbx:"column:sub" json:"sub" `
	Aud       string    `dbx:"column:aud" json:"aud" `
	CreatedAt time.Time `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt time.Time `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
}

func (_ *UserOidcRecord) TableName() string {
	return "user_oidc"
}

func (r *UserOidcRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *UserOidcRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var UserPasswordsTable = UserPasswordsTableSchema{}

type UserPasswordsTableSchema struct {
}

func (_ UserPasswordsTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`user_id`", alias + "`hashed_password`", alias + "`created_at`", alias + "`updated_at`"}
}

func (s UserPasswordsTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from user_passwords as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from user_passwords ", strings.Join(s.Columns(alias), ","))
}

func (_ UserPasswordsTableSchema) CountSQL() string {
	return " select count(1) from user_passwords "
}

type UserPasswordsRecord struct {
	UserId         []byte    `dbx:"column:user_id" json:"user_id" `
	HashedPassword string    `dbx:"column:hashed_password" json:"hashed_password" `
	CreatedAt      time.Time `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt      time.Time `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
}

func (_ *UserPasswordsRecord) TableName() string {
	return "user_passwords"
}

func (r *UserPasswordsRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *UserPasswordsRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var UserProfileTable = UserProfileTableSchema{}

type UserProfileTableSchema struct {
}

func (_ UserProfileTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`id`", alias + "`user_id`", alias + "`created_at`", alias + "`updated_at`", alias + "`deleted_at`"}
}

func (s UserProfileTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from user_profile as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from user_profile ", strings.Join(s.Columns(alias), ","))
}

func (_ UserProfileTableSchema) CountSQL() string {
	return " select count(1) from user_profile "
}

type UserProfileRecord struct {
	ID        []byte     `dbx:"column:id" json:"id" `
	UserId    string     `dbx:"column:user_id,primary_key" json:"user_id" `
	CreatedAt time.Time  `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt time.Time  `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
	DeletedAt *time.Time `dbx:"column:deleted_at" json:"deleted_at,omitempty" `
}

func (_ *UserProfileRecord) TableName() string {
	return "user_profile"
}

func (r *UserProfileRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *UserProfileRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}

var VerificationCodeTable = VerificationCodeTableSchema{}

type VerificationCodeTableSchema struct {
}

func (_ VerificationCodeTableSchema) Columns(alias string) []string {
	if alias != "" {
		alias = "`" + alias + "`" + "."
	}
	return []string{alias + "`id`", alias + "`email`", alias + "`value`", alias + "`purpose`", alias + "`created_at`", alias + "`updated_at`"}
}

func (s VerificationCodeTableSchema) SelectSQL(alias string) string {
	if alias != "" {
		return fmt.Sprintf(" select %v from verification_code as "+alias, strings.Join(s.Columns(alias), ","))
	}
	return fmt.Sprintf(" select %v from verification_code ", strings.Join(s.Columns(alias), ","))
}

func (_ VerificationCodeTableSchema) CountSQL() string {
	return " select count(1) from verification_code "
}

type VerificationCodeRecord struct {
	ID        int32     `dbx:"column:id,primary_key,auto_increment" json:"id" `
	Email     string    `dbx:"column:email" json:"email" `
	Value     string    `dbx:"column:value" json:"value" `
	Purpose   string    `dbx:"column:purpose" json:"purpose" `
	CreatedAt time.Time `dbx:"column:created_at,insert:current_timestamp" json:"created_at" `
	UpdatedAt time.Time `dbx:"column:updated_at,insert:current_timestamp,update:current_timestamp" json:"updated_at" `
}

func (_ *VerificationCodeRecord) TableName() string {
	return "verification_code"
}

func (r *VerificationCodeRecord) JSON() string {
	s, _ := json.Marshal(r)
	return string(s)
}

func (r *VerificationCodeRecord) PettyJSON() string {
	s, _ := json.MarshalIndent(r, "", "\t")
	return string(s)
}
